{"name":"ssl-cert-generator-lib","tagline":"OpenSSL certificate generator library","body":"# SSL cert generator library #\r\n\r\nhttp://akinaru.github.io/ssl-cert-generator-lib/\r\n\r\n<i>Last update 11/10/2015</i>\r\n\r\nGenerate SSL certificates using openssl api :\r\n\r\n* generate X509 public/private key pair, output can be PEM, PKCS12 certs\r\n* generate self-signed cert (which can be used as CA cert)\r\n* generate X509 public/private key pair signed with a specific issuer cert or a CA\r\n* generate a diffie hellman key\r\n* output can be a specific file / certificates can be accessed programmatically as well\r\n\r\n<hr/>\r\n\r\n<h4>Generality</h4>\r\n\r\nLibrary is generated as a shared library (.dll or .so)\r\n\r\n```\r\ncd sslcertgenerator\r\nmake\r\n```\r\n\r\nLibrary release is under `release` directory.\r\n\r\nYou can export shared library to your library path to use it.\r\n\r\n<hr/>\r\n\r\n<h4>Generate self-signed certificates </h4>\r\n\r\nDeclare new instance of SslGen :\r\n```\r\n#include \"crypto/sslgen.h\"\r\n\r\n....\r\n\r\nsslgen ssl_gen;\r\n```\r\n\r\nGenerate self-signed certificates :\r\n```\r\nssl_gen.create_standalone_keys(cert_entries *entries,struct tm *date_start,struct tm *date_end,int serial,char *passin,int rsa_key_size,certificate_raw *certs);\r\n```\r\n\r\n* `entries` : a set of certificate entries with following structure :\r\n```\r\ntypedef struct {\r\n    std::string country_name;\r\n    std::string state_province_name;\r\n    std::string locality_name;\r\n    std::string organization_name;\r\n    std::string organizational_unit_name;\r\n    std::string common_name;\r\n} cert_entries;\r\n```\r\n* `date_start` and `date_end` specifying certificate validation timings\r\n* `serial` : specifying certificate serial number to be used\r\n* `passin` : optional password for private key\r\n* `rsa_key_size` : size of key (2048 or more is prefered)\r\n* `certificate_raw` : output pointer structure as following :\r\n```\r\ntypedef struct {\r\n    std::string       public_key_pem;\r\n    std::string       private_key_pem;\r\n    std::vector<char> key_pkcs12;\r\n} certificate_raw;\r\n\r\n```\r\n\r\n<h4>Generate signed certificates </h4>\r\n\r\n```\r\nssl_gen.create_signed_keys(cert_entries *entries,struct tm *date_start,struct tm *date_end,int serial,char *passin,int rsa_key_size,ca_cert *cert_item,certificate_raw *certs);\r\n```\r\n* `entries` : a set of certificate entries with following structure :\r\n```\r\ntypedef struct {\r\n    std::string country_name;\r\n    std::string state_province_name;\r\n    std::string locality_name;\r\n    std::string organization_name;\r\n    std::string organizational_unit_name;\r\n    std::string common_name;\r\n} cert_entries;\r\n```\r\n* `date_start` and date_end specifying certificate validation timings\r\n* `serial` : specifying certificate serial number to be used\r\n* `passin` : optional password for private key\r\n* `rsa_key_size` : size of key (2048 or more is prefered)\r\n* `ca_cert` : structure defining public/private key of CA cert or cert issuer\r\n```\r\ntypedef struct{\r\n    std::string public_key_pem;\r\n    std::string private_key_pem;\r\n    std::string pass;\r\n} ca_cert;\r\n```\r\n\r\n* `certificate_raw` : output pointer structure as following :\r\n\r\n```\r\ntypedef struct {\r\n    std::string       public_key_pem;\r\n    std::string       private_key_pem;\r\n    std::vector<char> key_pkcs12;\r\n} certificate_raw;\r\n```\r\n\r\n<h4>Specify output format and file output</h4>\r\n\r\nBy default public and private key are given in PEM format.\r\nBy default, no output file path is specified.\r\n\r\nYou can specify cert output files for PEM cert as following :\r\n\r\n```\r\nssl_gen.setOutputPEM(bool enable_pem,char* public_key_file,char* private_key_file);\r\n```\r\n\r\n* `enable_pem` : enable PEM format (default)\r\n* `public_key_file` : output file for public key in PEM format\r\n* `private_key_file` : output file for private key in PEM format\r\n\r\nYou can specify cert output files for PKCS12 cert as following :\r\n\r\n```\r\nssl_gen.setOutputP12(bool enable_p12,char* key_file);\r\n```\r\n\r\n* `enable_p12` : enable PKCS12 format\r\n* `key_file` : output file for public/private key in PKCS12 format\r\n\r\n<h4>Generate DH key</h4>\r\n\r\nGenerate Diffie-Hellman key with :\r\n\r\n```\r\nssl_gen.create_dh_key(int key_size,char* file_path);\r\n```\r\n* `key_size` : key size to be used (2048 is preferred)\r\n* `file_path` : required output file path for the key\r\n\r\n<b>Examples</b>\r\n\r\n[From test project in main.cpp](https://github.com/akinaru/ssl-cert-generator-lib/blob/master/sslcertgenerator/main.cpp)\r\n\r\n<i>Generate self-signed certificates</i>\r\n\r\n```\r\n\r\n/*instanciate certificate generation lib*/\r\nsslgen ssl_gen;\r\n\r\n/* get system time for date start*/\r\ntime_t systime;\r\nstruct tm *sys_time;\r\ntime(&systime);\r\nsys_time=localtime(&systime);\r\n\r\n/* set end date to 30/08/2019 00:00:00 (current timezone)*/\r\nstruct tm  date_end;\r\ndate_end.tm_year = 2019 - 1900;\r\ndate_end.tm_mon = 8 - 1;\r\ndate_end.tm_mday = 30;\r\ndate_end.tm_hour = 0;\r\ndate_end.tm_min = 0;\r\ndate_end.tm_sec = 0;\r\ndate_end.tm_isdst = sys_time->tm_isdst;\r\n\r\n/*set certificate entries*/\r\ncert_entries entries;\r\nentries.country_name=CERT_COUNTRY_NAME;\r\nentries.state_province_name=CERT_STATE_OR_PROVINCE_NAME;\r\nentries.locality_name=CERT_LOCALITY_NAME;\r\nentries.organization_name=CERT_ORGANIZATION_NAME;\r\nentries.organizational_unit_name=CERT_ORGANIZATION_UNIT_NAME;\r\n\r\n/* generate public/private key (we want PEM + PKCS12 format) + output is retrieved through input pointer + file output name*/\r\n\r\n/*set output cert as pem certificate (default). If you set file output name. Cert will be written under these files*/\r\nssl_gen.setOutputPEM(true,\"../../output_test/test.crt\",\"../../output_test/test.key\");\r\n\r\n/*set output cert as p12 certificate. If you set file output name. Cert will be written under these files*/\r\nssl_gen.setOutputP12(true,\"../../output_test/test.p12\");\r\n\r\ncertificate_raw certs;\r\ncertificate_raw *certs_ptr;\r\ncerts_ptr=&certs;\r\ncerts_ptr->public_key_pem=\"\";\r\ncerts_ptr->private_key_pem=\"\";\r\n\r\nentries.common_name=\"Github ssl-cert-generator\";\r\n\r\n/* generate standalone keys (not signed with other certificate) */\r\nssl_gen.create_standalone_keys(&entries,sys_time,&date_end,509,\"123456\",2048,&certs);\r\n\r\ncout << \"public cert  : \" << certs_ptr->public_key_pem << endl;\r\ncout << \"private cert : \" << certs_ptr->private_key_pem << endl;\r\ncout << \"p12 binary content : \" << endl;\r\nutils::printHexFormattedCert(certs_ptr->key_pkcs12,certs_ptr->key_pkcs12.size());\r\n\r\n```\r\n\r\n<i>Generate signed certificate</i>\r\n\r\n```\r\n\r\nstd::ifstream in1(\"../../cert/ca.key\");\r\nstd::string root_ca_key_input((std::istreambuf_iterator<char>(in1)),std::istreambuf_iterator<char>());\r\n\r\nstd::ifstream in2(\"../../cert/ca.crt\");\r\nstd::string root_ca_pub_input((std::istreambuf_iterator<char>(in2)),std::istreambuf_iterator<char>());\r\n\r\n/*set output cert as pem certificate (default). If you set file output name. Cert will be written under these files*/\r\nssl_gen.setOutputPEM(true,\"../../output_test/client.crt\",\"../../output_test/client.key\");\r\n\r\n/*set output cert as p12 certificate. If you set file output name. Cert will be written under these files*/\r\nssl_gen.setOutputP12(true,\"../../output_test/client.p12\");\r\n\r\nca_cert ca;\r\nca.public_key_pem=root_ca_pub_input;\r\nca.private_key_pem=root_ca_key_input;\r\nca.pass=\"123456\";\r\n\r\nentries.common_name=\"Github ssl-cert-generator signed cert\";\r\n\r\nssl_gen.create_signed_keys(&entries,sys_time,&date_end,22555,\"123456\",2048,&ca,&certs);\r\n\r\ncout << \"public cert  : \" << certs_ptr->public_key_pem << endl;\r\ncout << \"private cert : \" << certs_ptr->private_key_pem << endl;\r\ncout << \"p12 binary content : \" << endl;\r\nutils::printHexFormattedCert(certs_ptr->key_pkcs12,certs_ptr->key_pkcs12.size());\r\n\r\n\r\n```\r\n\r\n<h4>Checking and Verifying certificates</h4>\r\n\r\nHere are some useful openssl command to test your output :\r\n\r\n<i>Check start date and end date for a PEM certificate</i>\r\n\r\n* `openssl x509 -startdate -noout -in cert.crt`\r\n* `openssl x509 -enddate -noout -in cert.crt`\r\n\r\n<i>Check a public PEM key</i>\r\n\r\n* openssl x509 -in cert.crt -text -noout\r\n\r\n<i>Check a private PEM key</i>\r\n\r\n* openssl rsa -in cert.key -check\r\n\r\n<i>Check a PKCS12 file</i>\r\n\r\n* openssl pkcs12 -info -in cert.p12\r\n\r\n<i>Check that public/key pair is uncorrupted</i>\r\n\r\nThose commands should return same md5 : \r\n* `openssl x509 -noout -modulus -in cert.crt | openssl md5`\r\n* `openssl rsa -noout -modulus -in cert.key | openssl md5`\r\n\r\n<i>Verify certificate</i>\r\n\r\n* `openssl verify cert.pem`\r\n\r\n<i>Verify certificate chain</i>\r\n\r\n* `openssl verify -CAfile ca.crt server.crt`\r\n\r\n<i>Install certificates on Linux</i>\r\n\r\n```\r\nsudo mkdir /usr/share/ca-certificates/extra\r\n\r\nsudo cp your_cert.pem /usr/share/ca-certificates/extra/your_cert.crt\r\n\r\nsudo dpkg-reconfigure ca-certificates\r\n\r\nsudo update-ca-certificates\r\n```\r\n\r\n<hr/>\r\n\r\n<b>Memory checking</b>\r\n\r\nProject is memcheck free\r\n\r\n``\r\nvalgrind --tool=memcheck --leak-check=full ./main\r\n``\r\n\r\nProject is built with openssl library built with -DPURIFY option to avoid valgrind to complain about uninitialized data (\"Conditional jump or move depends on uninitialised value(s)\" warnings).\r\n\r\nhttps://www.openssl.org/docs/faq.html#PROG14\r\n\r\n<b>TODO</b>\r\n\r\n* add static library\r\n* add certificate extensions\r\n* add CA certificate to PKCS12 for signed certificate\r\n* add pass for PKCS12 (distinguished from private key)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}